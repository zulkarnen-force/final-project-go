basePath: /
definitions:
  dto.CommentResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/dto.photoResponse'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.userResponse'
      user_id:
        type: integer
    type: object
  dto.CommentResponseCreate:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.CommentResponseUpdate:
    properties:
      id:
        type: integer
      message:
        type: string
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  dto.PhotoResponseUpdate:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.ResponseGetPhotos:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        properties:
          email:
            type: string
          username:
            type: string
        type: object
      user_id:
        type: integer
    type: object
  dto.ResponsePhoto:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.SocialMediaResponseCreate:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: integer
    type: object
  dto.SocialMediaResponseUpdate:
    properties:
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.SocialMediasResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.userResponse'
      user_id:
        type: integer
    type: object
  dto.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.UserLoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UserRegisterInput:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.UserResponseRegister:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.UserResponseUpdate:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.photoResponse:
    properties:
      caption:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.userResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: zulkarnen1900016072@webmail.uad.ac.id
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server order.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /comments/:
    get:
      consumes:
      - application/json
      description: get comments data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CommentResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Show all comments
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Create Comment user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.CommentResponseCreate'
      security:
      - ApiKeyAuth: []
      summary: Create Comment
      tags:
      - Comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Comment user
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Comment User with ID
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update Comment user
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommentResponseUpdate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Comment User with ID
      tags:
      - Comments
  /photos/:
    get:
      consumes:
      - application/json
      description: Get Photos user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResponseGetPhotos'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Photos
      tags:
      - Photos
    post:
      consumes:
      - application/json
      description: Create Photo user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponsePhoto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Photo
      tags:
      - Photos
  /photos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Photo user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Photo User with ID
      tags:
      - Photos
    put:
      consumes:
      - application/json
      description: Update Photo user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PhotoResponseUpdate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Photo User with ID
      tags:
      - Photos
  /socialmedias/:
    get:
      consumes:
      - application/json
      description: Get Social Media Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.SocialMediasResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Social Media Users
      tags:
      - Social Medias
    post:
      consumes:
      - application/json
      description: Creating social media user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialMediaResponseCreate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Social Media User
      tags:
      - Social Medias
  /socialmedias/{id}:
    delete:
      consumes:
      - application/json
      description: Delete social media user
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Social Media User with ID
      tags:
      - Social Medias
    put:
      consumes:
      - application/json
      description: Update Social with ID
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialMediaResponseUpdate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Social Media  User
      tags:
      - Social Medias
  /users/:
    delete:
      consumes:
      - application/json
      description: Delete current User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete current User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseUpdate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user data
      tags:
      - users
  /users/login/:
    post:
      consumes:
      - application/json
      description: authentication and return JWT token
      parameters:
      - description: Auth account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
      security:
      - ApiKeyAuth: []
      summary: Authentication user
      tags:
      - users
  /users/register/:
    post:
      consumes:
      - application/json
      description: create user account
      parameters:
      - description: Add account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseRegister'
      summary: Create user account
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
